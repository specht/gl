#!/usr/bin/env ruby

require 'active_support/inflector'
require 'fileutils'
require 'json'
require 'open3'
require 'pathname'
require 'stringio'
require 'tempfile'
require 'uri'
require 'yaml'

SCRIPT_DIR = File.dirname(File.realpath($0))
$: << SCRIPT_DIR
require 'include/misc'
require 'include/cli-dispatcher'

# try to load the paint gem for colored text output and provide a fallback it's not available
begin
    require 'paint'
    Paint.mode = 0xFFFFFF
rescue LoadError
    class Paint
        def self.[](s, *args)
            s
        end
    end
end

class GitLabIssuesConnectedToGit

    include Miscellaneous

    def initialize
        # first try editor configured by Git
        @editor = `git config core.editor`
        @editor = nil if @editor.empty?
        # if that failed, check EDITOR environment variable
        @editor ||= ENV['EDITOR']
        # if that failed as well, fall back to nano
        @editor ||= 'nano'

        # try to determine screen width
        @screen_width = nil
        temp = `stty size 2> /dev/null`
        if $?.exitstatus == 0
            @screen_width = temp.strip.split(' ')[1].strip.to_i
        end
        # default: 80 columns
        @screen_width ||= 80

        CliDispatcher::launch do |ac|
            ac.option('help') do |ac|
                ['list', 'todo', 'show', 'edit', 'start', 'close', 'reopen',
                 'commit', 'init', 'update', 'labels', 'whoami', 'search'].each do |x|
                    ac.option(x)
                end
                ac.handler { |args| run_pager(); show_help(args) }
            end

            # Issue commands

            ac.option('list', nil, true) do |ac, collected_parts|
                setup
                ac.option('--all')
                ac.option('--closed')
                add_autocomplete_options_for_labels(ac)
                ac.handler { |args| run_pager(); list(args) }
            end

            ac.option('todo') do |ac|
                setup
                ac.handler { |args| run_pager(); todo }
            end

            ac.option('show') do |ac|
                setup
                add_autocomplete_options_for_issue_slug_parts(ac, :open_issue)
                add_autocomplete_options_for_issue_slugs(ac, :issue)
                ac.handler do |args|
                    issue = current_issue_or_from_args(args)
                    run_pager()
                    show(issue)
                end
            end

            ac.option('edit') do |ac|
                setup
                add_autocomplete_options_for_issue_slug_parts(ac, :open_issue)
                add_autocomplete_options_for_issue_slugs(ac, :issue)
                ac.handler do |args|
                    issue = current_issue_or_from_args(args)
                    edit(issue)
                end
            end

            ac.option('start') do |ac|
                setup
                add_autocomplete_options_for_issue_slug_parts(ac, :open_issue)
                add_autocomplete_options_for_issue_slugs(ac, :issue)
                ac.handler do |args|
                    issue = current_issue_or_from_args(args)
                    run_pager()
                    start(issue)
                end
            end

            ac.option('close') do |ac|
                setup
                add_autocomplete_options_for_issue_slug_parts(ac, :open_issue)
                add_autocomplete_options_for_issue_slugs(ac, :open_issue)
                ac.handler do |args|
                    issue = current_issue_or_from_args(args)
                    close_issue(issue)
                end
            end

            ac.option('reopen') do |ac|
                setup
                add_autocomplete_options_for_issue_slug_parts(ac, :closed_issue)
                add_autocomplete_options_for_issue_slugs(ac, :closed_issue)
                ac.handler do |args|
                    issue = current_issue_or_from_args(args)
                    reopen_issue(issue)
                end
            end

            ac.option('commit') do |ac|
                setup
                add_autocomplete_options_for_issue_slug_parts(ac, :open_issue)
                add_autocomplete_options_for_issue_slugs(ac, :issue)
                ac.handler do |args|
                    issue = current_issue_or_from_args(args)
                    commit(issue, args[1, args.size - 1])
                end
            end

            ac.secret_option('commit-message') do |ac|
                setup
                ac.handler { |args| commit_message }
            end

            ac.option('init') do |ac|
                setup
                ac.handler { |args| init }
            end

            ac.option('update') do |ac|
                setup
                ac.handler { |args| update }
            end

            ac.option('labels') do |ac|
                setup
                ac.handler { |args| labels }
            end

            ac.option('whoami') do |ac|
                setup
                ac.handler { |args| whoami }
            end

            ac.option('search') do |ac|
                setup
                ac.handler { |args| search(args) }
            end
        end
        puts "Unknown command: #{ARGV.first}. Try 'gl help' for a list of possible commands."
    end

    def add_autocomplete_options_for_labels(ac)
        @tokens_by_type[:label].each do |token|
            @tokens[token].each do |item|
                if item.is_a? String
                    ac.option(token, item.parameterize)
                end
            end
        end
    end

    def add_autocomplete_options_for_issue_slug_parts(ac, which = :issue)
        # let slug parts expand to full issue identifiers for issues
        @tokens_by_type[which].each do |token|
            @tokens[token].each do |item|
                unless item.is_a? String
                    issue = @issues[item]
                    if (which == :closed_issue && issue['state'] != 'closed') ||
                       (which == :open_issue && issue['state'] != 'opened')
                        next
                    end
                    slug = issue['title'].parameterize
                    slug.split('-').each do |slug_part|
                        ac.option(slug_part, "#{item}-#{slug}")
                    end
                end
            end
        end
    end

    def add_autocomplete_options_for_issue_slugs(ac, which = :issue)
        # also auto-complete all full issue identifiers (open or closed)
        @tokens_by_type[which].each do |token|
            @tokens[token].each do |item|
                unless item.is_a? String
                    issue = @issues[item]
                    if (which == :closed_issue && issue['state'] != 'closed') ||
                       (which == :open_issue && issue['state'] != 'opened')
                        next
                    end
                    slug = issue['title'].parameterize
                    # autocomplete 3- directly, don't offer 13- or 23-
                    ac.option("#{item}-#{slug}")
                    # autocomplete any part of slug to complete issue
                    ac.option(slug, "#{item}-#{slug}")
                end
            end
        end
    end

    def current_issue_or_from_args(args)
        issue = nil

        if args.first
            issue = args.first
        else
            issue = `git rev-parse --abbrev-ref HEAD`.strip[0, 6]
        end

        if issue.split('-').first =~ /^\d+$/
            issue = issue.split('-').first.to_i
        else
            issue = nil
        end

        unless issue
            puts "Error: No issue specified (and also not currently in an issue branch)."
            exit(1)
        end
        issue
    end

    def cmul(c, f)
        return nil if c.nil?
        sprintf('#%02x%02x%02x', *((0..3).map { |i| (c[i * 2 + 1, 2].to_i(16).to_f * f).to_i }))
    end

    def warning(&block)
        STDERR.puts Paint['-' * 75, :red]
        io = StringIO.new
        yield(io)
        STDERR.puts Paint[io.string.strip, :red]
        STDERR.puts Paint['-' * 75, :red]
        STDERR.puts
    end

    def error(message)
        STDERR.puts "Error: #{message}"
        exit(1)
    end

    def assert_not_world_readable(path)
        if File.stat(path).world_readable?
            warning do |io|
                io.puts "WARNING: #{path} is world readable."
                io.puts "You should fix this with something like:"
                io.puts "$ chmod 600 #{path}"
            end
        end
    end

    def assert_ignored_by_git(path)
        `git check-ignore -q "#{path}"`
        unless $? == 0
            warning do |io|
                io.puts "WARNING: #{path} is not ignored by Git."
                io.puts "You should fix this with something like:"
                relative_path = Pathname.new(path).relative_path_from(Pathname.new(File::join(@project_root, '..'))).to_s
                gitignore_path = Pathname.new(File.join(@project_root, '..', '.gitignore')).relative_path_from(Pathname.new($pwd)).to_s
                io.puts "$ echo '#{relative_path}' >> #{gitignore_path}"
            end
        end
    end

    def git_hooks_in_place?
        Dir[File.join(SCRIPT_DIR, 'hooks', '*')].each do |hook|
            # check if hook exists
            unless File.exist?(File.join(@hook_path, File.basename(hook)))
                return false
            end
            # check if hook is up to date
            unless File.read(File.join(@hook_path, File.basename(hook))) == File.read(hook)
                return false
            end
        end
        true
    end

    def setup
        @project_root = Dir::pwd
        while !File::directory?(File::join(@project_root, '.git'))
            @project_root = File.expand_path('..', @project_root)
            if @project_root == '/'
                error('Not a git repository.')
            end
        end

        Dir::chdir(@project_root)

        @project_root = File::join(@project_root, '.gl')

        @hook_path = File::join(@project_root, '..', '.git', 'hooks')

        unless git_hooks_in_place?
            unless ARGV.first == 'init'
                STDERR.puts "Error: Git hooks not initialized. Please run 'gl init'."
                STDERR.puts "If you're just installing gl on your machine, you might want to create the following symlink:"
                STDERR.puts "$ sudo ln -s #{File::expand_path(__FILE__)} /usr/local/bin/gl"
                exit(1)
            end
        end

        @config_path = File::join(@project_root, 'config.yaml')
        if File::exist?(@config_path)
            @config = YAML::load(File::read(@config_path))
            @project_uri = @config['project_uri']
        else
            git_remote = `git remote get-url origin`.strip
            remote_uri = git_remote.sub(/\.git$/, '')
            # Do we have a SSH or HTTPS URL?
            if !git_remote.start_with?('https://', 'git@')
                STDERR.puts "Error: Unknown remote URL format in #{git_remote}"
                exit(1)
            end
            if git_remote.start_with?('git@')
                # Substitute ':' before introducing 'https://'
                remote_uri = remote_uri.sub(':', '/').sub(/^git@/, 'https://')
            end
            @project_uri_path = File::join(@project_root, 'project_uri')
            STDERR.puts "Error: no project configuration defined (#{@config_path} not found)."
            STDERR.puts "This only has to be done once and you should only see this if you're the project maintainer."
            STDERR.puts "Go to the project's GitLab page and enter the URL shown in your browser's address bar."
            STDERR.puts
            STDERR.print "Project URL [#{remote_uri}] "
            uri = STDIN.readline.strip
            if uri.empty?
                uri = remote_uri
            end
            STDERR.puts
            u = URI::parse(uri)
            @project_uri = "#{u.scheme}://#{u.host}/api/v4/projects/#{u.path.split('/').select { |x| !x.empty? }.join('%2f')}"
            STDERR.puts "I've derived the following project URI from what you've just entered:"
            STDERR.puts @project_uri
            STDERR.puts
            STDERR.puts "If you need to correct this, please edit .gl/config.yaml - this is where the project URI is stored, along with other settings"
            STDERR.puts "Please add and commit .gl/config.yaml so that other developers won't have to repeat this step:"
            STDERR.puts
            STDERR.puts "$ git add #{@config_path}"
            STDERR.puts "$ git commit -m 'added gl configuration'"
            STDERR.puts ""
            STDERR.puts "Because of the installed Git hooks, you cannot commit without referencing an issue now."
            STDERR.puts "Here's a suggestion: create a 'repository maintenance' issue in GitLab, then run"
            STDERR.puts "`gl update` and commit to it using `gl commit [issue id]`."

            FileUtils::mkpath(File::dirname(@config_path))

            @config = {'project_uri' => @project_uri, 'max_commit_message_header_length' => nil}

            File::open(@config_path, 'w') do |f|
                f.puts(@config.to_yaml)
            end
        end

        @user_config = {}
        @user_config_path = File::join(@project_root, 'config.user.yaml')
        if File::exist?(@user_config_path)
            assert_ignored_by_git(@user_config_path)
            @user_config = YAML::load(File::read(@user_config_path))
            @editor = @user_config['editor'] if @user_config['editor']
            if @user_config['features']
                @global_disable_pager = true unless @user_config['features']['pagination']
                @global_disable_wordwrap = true unless @user_config['features']['wordwrap']
                @global_disable_strike = true unless @user_config['features']['strike']
                Paint.mode = 0 unless @user_config['features']['color']
            end
        end

        @private_token_path_repository = File::join(@project_root, 'private_token')
        @private_token_path_user = File::join(Dir.home, '.gl_private_token')
        if File.exist?(@private_token_path_repository)
            assert_not_world_readable(@private_token_path_repository)
            assert_ignored_by_git(@private_token_path_repository)
            @token = File::read(@private_token_path_repository).strip
        else
            if File.exist?(@private_token_path_user)
                assert_not_world_readable(@private_token_path_user)
                @token = File::read(@private_token_path_user).strip
            else
                STDERR.puts "Error: no private token stored for GitLab API access."
                STDERR.puts "Please log into GitLab and create a Personal Access Token:"
                u = URI::parse(@project_uri)
                STDERR.puts
                STDERR.puts "#{u.scheme}://#{u.host}/profile/personal_access_tokens"
                STDERR.puts
                STDERR.puts "Make sure you check the 'api' checkbox!"
                STDERR.puts "When you're done, paste the token here:"
                STDERR.puts
                STDERR.print "Token: "
                @token = STDIN.readline.strip
                FileUtils::mkpath(File::dirname(@private_token_path_repository))
                File::open(@private_token_path_repository, 'w') do |f|
                    f.write(@token)
                end
                # set file permissions (it's a private token and as such it should be private)
                File.chmod(0600, @private_token_path_repository)
                assert_ignored_by_git(@private_token_path_repository)
            end
        end
        @state_path = File::join(@project_root, 'state.yaml')
        assert_ignored_by_git(@state_path)

        update_if_necessary
        data = YAML::load(File::read(@state_path))
        @issues = data[:issues]
        @labels = data[:labels]
        @user = data[:user]
        @tokens = {}
        @tokens_by_type = {
            :label => Set.new(),
            :issue => Set.new(),
            :open_issue => Set.new(),
            :closed_issue => Set.new()
        }
        # extract tokens from issues and labels (for auto-completion)
        @issues.values.each do |issue|
            slug_parts = issue['title'].parameterize.split('-')
            if issue['assignee']
                slug_parts += issue['assignee']['name'].parameterize.split('-')
            end
            slug_parts << issue['iid'].to_s
            slug_parts.each do |token|
                @tokens[token] ||= Set.new()
                @tokens[token] << issue['iid']
                @tokens_by_type[:issue] << token
                if issue['state'] == 'opened'
                    @tokens_by_type[:open_issue] << token
                elsif issue['state'] == 'closed'
                    @tokens_by_type[:closed_issue] << token
                end
            end
        end
        @labels.values.each do |label|
            slug_parts = label['name'].parameterize.split('-')
            slug_parts.each do |token|
                @tokens[token] ||= Set.new()
                @tokens[token] << label['name']
                @tokens_by_type[:label] << token
            end
        end
    end

    def current_issue()
        id = `git branch`.split("\n").select do |x|
            x.strip[0, 1] == '*'
        end.first.sub('*', '').strip.split('-').first
        if id =~ /^\d+$/
            id.to_i
        else
            nil
        end
    end

    def init()
        FileUtils::mkpath(@hook_path)
        Dir[File.join(SCRIPT_DIR, 'hooks', '*')].each do |hook|
            File::open(File.join(@hook_path, File.basename(hook)), 'w') do |f|
                f.write File.read(hook)
            end
            system("chmod +x \'#{File.join(@hook_path, File.basename(hook))}\'")
            STDERR.puts "Successfully installed Git #{File.basename(hook)} hook."
        end
    end

    def gitlab_curl(method, url, data = nil, special_url = nil)
        # returns: {:status => 200, :body => '', :headers => {}}
        # curl --write-out %{http_code} --silent --output out URL
        response_body_path = Dir::Tmpname.create('gl-curl-response-body') {}
        response_headers_path = Dir::Tmpname.create('gl-curl-response-headers') {}

        command = "curl --request #{method} -H 'Content-Type: application/json' --header 'PRIVATE-TOKEN: #{@token}' #{data ? '-d @-' : ''} --write-out %{http_code} -sS --output '#{response_body_path}' -D '#{response_headers_path}' "
        if special_url
            command += "'#{special_url}'"
        else
            command += "'#{@project_uri}/#{url}'"
        end
        stdin, stdout, stderr, thread = Open3.popen3(command)
        stdin.write(data.to_json) if data
        stdin.close
        exit_code = thread.value.exitstatus
        data = nil
        if exit_code == 0
            headers = {}
            File::read(response_headers_path).split("\n").each do |x|
                colon_index = x.index(':')
                next unless colon_index
                key = x[0, colon_index].strip
                value = x[colon_index + 1, x.size].strip
                headers[key] = value
            end
            result = {
                :status => stdout.read.strip.to_i,
                :body => File::read(response_body_path),
                :headers => headers
            }
            stdout.close
            stderr.close
            if method == 'GET' && result[:status] != 200
                STDERR.print "\r"
                STDERR.puts "Error: HTTP 404 Not Found"
                STDERR.puts "on HTTP #{method} #{@project_uri}/#{url}"
                exit(1)
            end
            result
        else
            STDERR.print "\r"
            STDERR.puts stderr.read
            exit(1)
        end
    end

    def gitlab_get(url)
        page = 1
        data = nil
        loop do
            result = gitlab_curl('GET', url + "/?per_page=100&page=#{page}")
            new_data = JSON.parse(result[:body])
            if data.nil?
                data = new_data
            else
                data += new_data
            end

            if result[:headers]['X-Page'] && result[:headers]['X-Page'].to_i < result[:headers]['X-Total-Pages'].to_i
                page += 1
            else
                break
            end
        end
        data
    end

    def gitlab_put(url, data = nil)
        JSON.parse(gitlab_curl('PUT', url, data)[:body])
    end

    def get_user()
        JSON.parse(gitlab_curl('GET', nil, {}, @project_uri.split('/api/v4').first + '/api/v4/user')[:body])
    end

    def idle_spinner(&block)
        idle_spinner_thread = Thread.new do
            loop do
                ['|', '/', '-', '\\'].each do |c|
                    STDERR.print "\r#{c}"
                    sleep 0.1
                end
            end
        end
        idle_spinner_thread.run
        yield
        idle_spinner_thread.kill
        STDERR.print "\r"
    end

    def update_issue(issue)
        # update a single issue in the state file
        state = YAML::load(File::read(@state_path))
        state[:issues][issue['iid']] = issue
        File::open(@state_path, 'w') do |f|
            f.write state.to_yaml
        end
    end

    def close_issue(id)
        unless @issues.include?(id)
            raise "Unknown issue: #{id}"
        end
        idle_spinner do
            update_issue(gitlab_put("issues/#{id}?state_event=close"))
        end
    end

    def reopen_issue(id)
        unless @issues.include?(id)
            raise "Unknown issue: #{id}"
        end
        idle_spinner do
            update_issue(gitlab_put("issues/#{id}?state_event=reopen"))
        end
    end

    def update()
        thread = Thread.new do
            loop do
                ['|', '/', '-', '\\'].each do |c|
                    STDERR.print "\r#{c}"
                    sleep 0.1
                end
            end
        end
        thread.run

        t1 = Thread.new do
            @issues = {}
            gitlab_get('issues').each do |entry|
                @issues[entry['iid']] = entry
            end
        end
        t1.run
        t2 = Thread.new do
            @labels = {}
            gitlab_get('labels').each do |entry|
                @labels[entry['name']] = entry
            end
        end
        t2.run
        t3 = Thread.new do
            @user = get_user
        end
        t3.run

        t1.join
        t2.join
        t3.join

        issues_by_status = {}
        @issues.values.each do |issue|
            issues_by_status[issue['state']] ||= 0
            issues_by_status[issue['state']] += 1
        end

        thread.kill
        STDERR.print "\r"

        STDERR.puts "Fetched #{@issues.size} issues (#{issues_by_status.keys.sort.reverse.map { |x| "#{issues_by_status[x]} #{x}" }.join(', ')}) and #{@labels.size} labels."
        File::open(@state_path, 'w') do |f|
            data = {}
            data[:issues] = @issues
            data[:labels] = @labels
            data[:user] = @user
            f.write data.to_yaml
        end

        # TODO: update branch names
    end

    def update_if_necessary
        update unless File::exist?(@state_path)
    end

    def issue_to_line(issue, id_width = 1)
        id = issue['iid']
        color = :default
        bgcolor = :default
        id_s = "[##{id}]"
        if issue['state'] == 'closed'
            id_s = unicode_strike_through(id_s)
            color = '#666'
            bgcolor = '#222'
        end
        line = Paint["#{' ' * [0, (id_width - id.to_s.size)].max}#{id_s} #{issue['title']}", color, bgcolor]
        unless issue['labels'].empty?
            s = issue['labels'].sort.map do |label|
                color = nil
                if @labels.include?(label)
                    color = @labels[label]['color']
                end
                Paint[label.gsub(' ', "\u00a0"), color, bgcolor]
            end
            line += Paint[' (', nil, bgcolor]
            line += s.join(Paint[', ', nil, bgcolor])
            line += Paint[')', nil, bgcolor]
        end
        indent(wordwrap(line, @screen_width - id_width - 4), id_width + 4, false).strip
    end

    def list(args = [], sort_by = nil, filter_by = nil)
        show_states = ['opened']
        if args.include?('--all')
            show_states = ['opened', 'closed']
        elsif args.include?('--closed')
            show_states = ['closed']
        end
        show_labels = Set.new(args.select { |x| x[0] != '-' })
        id_width = @issues.keys.max.to_s.size
        label_order = []
        if show_labels.empty? && @user_config && @user_config['highlighted_labels']
            label_order = @user_config['highlighted_labels']
        end
        label_set = Set.new(label_order)
        previous_label_index = nil
        previous_due_date = nil
        current_user = nil
        if filter_by == :current_user
            current_user = @user['id']
        end
        @issues.keys.sort do |a, b|
            if sort_by.nil?
                unless label_order.empty?
                    present_labels_a = Set.new(@issues[a]['labels']) & label_set
                    first_order_a = present_labels_a.empty? ? label_order.size : present_labels_a.map { |x| label_order.index(x) }.min
                    present_labels_b = Set.new(@issues[b]['labels']) & label_set
                    first_order_b = present_labels_b.empty? ? label_order.size : present_labels_b.map { |x| label_order.index(x) }.min
                    first_order_a == first_order_b ?
                        (a <=> b) :
                        (first_order_a <=> first_order_b)
                else
                    a <=> b
                end
            else
                if sort_by == :due_date
                    dda = @issues[a]['due_date'] || '9999-99-99'
                    ddb = @issues[b]['due_date'] || '9999-99-99'
                    dda <=> ddb
                end
            end
        end.select do |id|
            if filter_by
                if filter_by == :current_user
                    @issues[id]['assignees'].map { |x| x['id'] }.include?(current_user)
                end
            else
                true
            end
        end.each do |id|
            issue = @issues[id]
            next unless show_states.include?(issue['state'])
            if sort_by.nil?
                unless label_order.empty?
                    present_labels = Set.new(@issues[id]['labels']) & label_set
                    first_order = present_labels.empty? ? label_order.size : present_labels.map { |x| label_order.index(x) }.min
                    if first_order < label_order.size
                        label = label_order[first_order]
                        color = @labels[label]['color']
                    else
                        label = 'Other'
                        color = '#aaaaaa'
                    end
                    if first_order != previous_label_index
                        puts cheading(label, color)
                        previous_label_index = first_order
                    end
                end
            else
                due_date = issue['due_date']
                if previous_due_date != due_date
                    previous_due_date = due_date
                    if due_date.nil?
                        puts cheading('No due date', '#aaaaaa')
                    else
                        puts cheading("Due date: #{due_date} (#{duration(due_date)})", '#ff0000')
                    end
                end
            end
            unless show_labels.empty?
                next if (Set.new(issue['labels'].map { |x| x.parameterize }) & show_labels).empty?
            end
            puts issue_to_line(issue, id_width)
        end
    end

    def todo
        list([], :due_date, :current_user)
    end

    def show(id)
        update_if_necessary
        if @issues.include?(id)
            issue = @issues[id]
            l = "[##{id}] #{issue['title']}"
            puts cheading(l, '#ffffff')
            puts "Labels:   #{issue['labels'].empty? ? '(none)' : issue['labels'].map { |x| Paint[x, @labels[x]['color']]}.join(', ')}"
            puts "State:    #{issue['state']}"
            puts "Created:  #{issue['created_at'][0, 10]}"
            puts "Closed:   #{issue['closed_at'][0, 10]}" if issue['closed_at']
            if issue['assignee']
                puts "Assigned: #{issue['assignee']['name']}"
            end
            if issue['due_date']
                puts "Due date: #{issue['due_date'][0, 10]} (#{duration(issue['due_date'])})"
            end
#             puts "Updated:  #{issue['updated_at'][0, 10]}"
            puts "URL:      #{issue['web_url']}"
            unless issue['description'].strip.empty?
                puts Paint['-' * @screen_width, '#ffffff']
                puts wordwrap(issue['description'], @screen_width)
            end
        else
            STDERR.puts "Error: no issue found with id #{id}."
        end
    end

    def call_editor(template)
        file = Tempfile.new('gl')
        contents = ''
        begin
            File::open(file.path, 'w') do |f|
                f.write(template)
            end
            system("#{@editor} #{file.path}")
            File::open(file.path, 'r') do |f|
                contents = f.read()
            end
        ensure
            file.close
            file.unlink
        end
        return contents
    end

    def edit(id)
        if @issues.include?(id)
            issue = @issues[id]
            before = issue['description'].strip
            after = call_editor(before).strip
            if before != after
                idle_spinner do
                    update_issue(gitlab_put("issues/#{id}", {:description => after}))
                end
            else
                puts "Leaving issue ##{id} unchanged: #{issue['title']}"
            end
        else
            STDERR.puts "Error: no issue found with id #{id}."
        end
    end

    def start(id)
        update_if_necessary
        if @issues.include?(id)
            branch_name = "#{id}-#{@issues[id]['title'].parameterize}"
            system("git branch #{branch_name} 2> /dev/null")
            system("git checkout #{branch_name}")
            if $?.success?
                merged_branches = `git branch --merged #{branch_name}`.split.map do |x|
                    x.strip
                end
                if merged_branches.include?('master')
                    puts "Branch is up-to-date with master."
                else
                    puts "Branch is not up-to-date with master, please run:"
                    puts "$ git merge master"
                end
            end
        else
            STDERR.puts "Error: no issue found with id #{id}."
        end
    end

    def commit(id, args)
        update_if_necessary
        if @issues.include?(id)
            system("GL_COMMIT_USING_ISSUE=#{id} git commit #{(args || []).join(' ')}")
        else
            STDERR.puts "Error: no issue found with id #{id}."
        end
    end

    def commit_message()
        update_if_necessary
        id = nil
        if ENV.include?('GL_COMMIT_USING_ISSUE')
            id ||= ENV['GL_COMMIT_USING_ISSUE'].to_i
        end
        id ||= current_issue
        if id
            if @issues.include?(id)
                line = "[##{id}] #{@issues[id]['title']}".strip
                max_length = @config['max_commit_message_header_length']
                if max_length && line.size > max_length - 3
                    line = line[0, max_length - 3] + '...'
                end
                puts line
            else
                puts "# Error: no issue found with id #{id}."
            end
        end
    end

    def collect_labels()
        if @all_labels.nil?
            @all_labels = Set.new()
            @issues.values.each do |issue|
                @all_labels |= Set.new(issue['labels'])
            end
        end
        @all_labels
    end

    def labels()
        collect_labels().sort.each do |label|
            puts Paint[label, @labels[label]['color']]
        end
    end

    def whoami()
        puts "Name : #{@user['name']} (#{@user['username']})"
        puts "Email: #{@user['email']}"
    end

    def search(keywords)
        keywords.map! { |x| x.downcase }
        @issues.each_pair do |id, issue|
            found = false
            keywords.each do |kw|
                if issue['title'].downcase.include?(kw) || issue['description'].downcase.include?(kw)
                    found = true
                    break
                end
            end
            if found
                puts issue_to_line(issue)
            end
        end
    end

    def show_help(args)
        items = HELP_TEXT.strip.split(/^__(.+)$/)
        items.shift
        texts = {}
        i = 0
        while (i + 1) < items.size
            texts[items[i]] = items[i + 1].strip
            i += 2
        end
        key = args.join('/')
        if texts.include?(key)
            puts texts[key]
        else
            puts texts['default']
        end
    end
    HELP_TEXT = <<END
__default
gl - GitLab issue tracking intertwined with Git

Usage: gl <command> [<args>]

Available issue-related commands:
list          List issues
todo          List your open issues sorted by due date
show          Show issue information
edit          Edit issue description
start         Start working on an issue
commit        Commit using an issue, regardless of the current branch
close         Close an issue
reopen        Reopen a previously closed issue

Miscellaneous commands:
init          Set up Git hooks
update        Update issues from GitLab server
labels        Show available labels
whoami        Show user information referenced by private token
search        Search for issues
help          Show usage information

See 'gl help <command>' for more information on a specific command.
gl supports tab completion pretty well - try to specify labels or
issue IDs via keywords, they will be auto-completed.

__new
Usage: gl new [<labels>] [<title>]

Create a new issue. Optionally, labels can be specified which should be
assigned to the issue. You may specify the issue title on the command line.

__list
Usage: gl list [--closed] [--all] [<labels>]

List issues. Optionally, labels can be specified for filtering.
By default, this lists open issues only. Specify --closed to list closed issues
only or --all to list open and closed issues.

__show
Usage: gl show [<issue>]

Show issue information. If no issue is specified, show the current issue as
denoted by the branch name.

__edit
Usage: gl edit [<issue>]

Edit an issue. If no issue is specified, show the current issue as denoted by
the branch name.

__start
Usage: gl start <issue>

Start working on an issue. gl will create a topic branch for the specified issue
using the same naming convention as GitLab. The branch name starts with the issue
ID followed by a dash, and through this pattern the git hooks set up by gl are
able to determine which issue all commits made in this branch should be connected to.

__close
Usage: gl close <issue>
Close an issue.

__reopen
Usage: gl reopen <issue>
Reopen a previously closed issue.

__commit
Usage: gl commit <issue> [<args> ...]

Commit using the specified issue, regardless of the current branch. Any extra arguments
are passed on to 'git commit'.

__update
Usage: gl update
Fetch changes from GitLab server.

__search
Usage: gl search <keywords>
Search for issues.
END
end

$pwd = Dir.pwd
begin
    script = GitLabIssuesConnectedToGit.new
#     script.run
ensure
    Dir.chdir($pwd)
end
